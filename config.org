#+TITLE: Emacs Configuration
#+AUTHOR: Dheeraj Vittal Shenoy
#+STARTUP: showeverything

This is my emacs configuration. To use, just run the =org-babel-tangle=
and it will tangle and produce files =init.el=, =early-init.el= and a =lisp=
folder containing custom emacs lisp functions.

* Early Init

#+begin_src elisp :tangle early-init.el
;; -*- lexical-binding: t; -*-

(defvar dj-emacs-debug (bound-and-true-p init-file-debug)
  "Non-nil to enable debug.")

;; Temporarily increase the garbage collection threshold.  These
;; changes help shave off about half a second of startup time.  The
;; `most-positive-fixnum' is DANGEROUS AS A PERMANENT VALUE.  See the
;; `emacs-startup-hook' a few lines below for what I actually use.
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.5)
(setq garbage-collection-messages dj-emacs-debug)

(setq package-enable-at-startup t)
(setq frame-inhibit-implied-resize t)

(push '(menu-bar-lines . 0) default-frame-alist)
(unless (memq window-system '(mac ns))
  (setq menu-bar-mode nil))

(push '(tool-bar-lines . 0) default-frame-alist)
(setq tool-bar-mode nil)

(push '(vertical-scroll-bars) default-frame-alist)
(push '(horizontal-scroll-bars) default-frame-alist)
(setq scroll-bar-mode nil)

;; The blinking cursor is distracting and interferes with cursor settings in
;; some minor modes that try to change it buffer-locally (e.g., Treemacs).
(blink-cursor-mode -1)

;;; Security
(setq gnutls-verify-error t)  ; Prompts user if there are certificate issues
(setq gnutls-min-prime-bits 3072)  ; Stronger GnuTLS encryption

;; Maximize screen frame
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; Same idea as above for the `file-name-handler-alist' and the
;; `vc-handled-backends' with regard to startup speed optimisation.
;; Here I am storing the default value with the intent of restoring it
;; via the `emacs-startup-hook'.
(defvar my-file-name-handler-alist file-name-handler-alist)
(defvar my-vc-handled-backends vc-handled-backends)

(setq file-name-handler-alist nil
      vc-handled-backends nil)

(setenv "LSP_USE_PLISTS" "true") ;; for performance boost in LSP-mode


(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (* 100 100 8)
                  gc-cons-percentage 0.1
                  file-name-handler-alist my-file-name-handler-alist
                  vc-handled-backends my-vc-handled-backends)))

(setq inhibit-startup-buffer-menu t)
(setq inhibit-x-resources t)
(setq inhibit-splash-screen t)


(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . light))
;; (add-to-list 'default-frame-alist '(alpha-background . 90))


;; Make native compilation silent
(when (native-comp-available-p)
  (setq native-comp-async-report-warnings-errors (or dj-emacs-debug 'silent))
  (setq native-comp-verbose (if dj-emacs-debug 1 0))
  (setq package-native-compile t))
(setq package-vc-register-as-project nil)

(setq jka-comp-verbose dj-emacs-debug)
(setq byte-compile-warnings (if dj-emacs-debug t '(not obsolete)))
(setq byte-compile-verbose dj-emacs-debug)
(setq warning-minimum-level (if dj-emacs-debug :warning :error))
(setq warning-suppress-log-types '((comp) (bytecomp)))
(setq warning-suppress-types '((lexical-binding)))

;; In PGTK, this timeout introduces latency. Reducing it from the default 0.1
;; improves responsiveness of childframes and related packages.
(when (boundp 'pgtk-wait-for-event-timeout)
  (setq pgtk-wait-for-event-timeout 0.001))

;; Disable warnings from the legacy advice API. They aren't useful.
(setq ad-redefinition-action 'accept)

;; Font compacting can be very resource-intensive, especially when rendering
;; icon fonts on Windows. This will increase memory usage.
(setq inhibit-compacting-font-caches t)

;; Disable bidirectional text scanning for a modest performance boost.
(setq-default bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right)

;; Give up some bidirectional functionality for slightly faster re-display.
(setq bidi-inhibit-bpa t)

;; Remove "For information about GNU Emacs..." message at startup
(advice-add 'display-startup-echo-area-message :override #'ignore)

(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)

#+end_src

* Defaults

#+begin_src elisp :tangle init.el
;; -*- lexical-binding: t; -*-

(use-package emacs
  :ensure nil
  :custom
  (text-mode-ispell-word-completion nil)
  (read-extended-command-predicate #'command-completion-default-include-p)

  :init

  ;;; Modes

  (winner-mode)
  (context-menu-mode)
  (cursor-intangible-mode)
  (save-place-mode)
  (column-number-mode)
  (line-number-mode)

  (require 'server)
  (setq server-client-instructions nil)
  (unless (server-running-p)
    (server-start))

  (add-hook 'before-save-hook 'whitespace-cleanup)


  ;;; Fonts
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (set-face-attribute 'font-lock-doc-face nil :slant 'italic)

  (set-face-attribute 'default nil
                      :font "Iosevka Nerd Font Mono"
                      :height 160)

  ;;; UTF-8 everywhere
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq-default indent-tabs-mode nil)
  (setq-default sentence-end-double-space nil)
  (setq-default tab-width 4)
  (setq-default line-spacing 0)
  (setq tab-width 4)

  ;; Continue wrapped lines at whitespace rather than breaking in the
  ;; middle of a word.
  (setq-default word-wrap t)
  ;; Disable wrapping by default due to its performance cost.
  (setq-default truncate-lines t)

  (setq frame-resize-pixelwise t)
  (setq ff-ignore-include t) ;; Ignore "#include" lines.
  (setq read-process-output-max (* 1024 1024)) ;; 1mb (for use with language server protocols)
  (setq x-underline-at-descent-line t)
  (setq widget-image-enable nil)
  (setq inhibit-startup-echo-area-message "neo")
  (setq inhibit-startup-message t)
  (setq echo-keystrokes-help nil)
  (setq eval-expression-print-length nil)
  (setq eval-expression-print-level nil)
  (setq find-library-include-other-files nil)
  (setq kill-do-not-save-duplicates t)
  (setq next-error-recenter '(4)) ; center of the window
  (setq remote-file-name-inhibit-auto-save t)
  (setq remote-file-name-inhibit-delete-by-moving-to-trash t)
  (setq search-whitespace-regexp ".*?")
  (setq load-prefer-newer t)
  ;; Allow for shorter responses: "y" for yes and "n" for no.
  (setq read-answer-short t)
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (advice-add 'yes-or-no-p :override #'y-or-n-p))
  (setq echo-keystrokes 0.1)
  (setq scroll-conservatively 1)
  (setq undo-limit 100000000)
  (setq window-combination-resize t)
  (setq delete-by-moving-to-trash t)
  (setq frame-title-format nil)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq custom-file (make-temp-file "emacs-custom-"))
  (setq confirm-kill-emacs 'yes-or-no-p)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
  (setq make-backup-files nil)
  (setq backup-by-copying-when-linked t)
  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq version-control t)
  (setq backup-inhibited nil) ; Not sure if needed, given `make-backup-files'
  (setq custom-safe-themes t)
  (setq create-lockfiles nil)
  (setq tab-always-indent 'complete)
  (setq custom-buffer-done-kill t)
  (setq view-read-only t)
  (setq grep-use-headings t)

  (dolist (cmd '(narrow-to-region
                 upcase-region
                 downcase-region))
    (put cmd 'disabled nil))

  ;; Window buffer alist

  (setq display-buffer-alist
        '(("\\*[Hh]elp\\*"
           (display-buffer-in-side-window)
           (window-width . 0.5)
           (side . right)
           (slot . 0))

          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Messages\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.25)
           (side . bottom)
            (slot . 0))
          ))

  ;; Resolve symlinks so that operations are conducted from the file's directory
  (setq find-file-visit-truename t)
  (setq vc-follow-symlinks t)
  (setq vc-git-diff-switches '("--histogram"))  ; Faster algorithm for diffing.

  (setq split-width-threshold 170)
  (setq split-height-threshold nil)

  ;;; Auto Save
  ;; Enable auto-save to safeguard against crashes or data loss. The
  ;; `recover-file' or `recover-session' functions can be used to restore
  ;; auto-saved data.
  (setq auto-save-default nil)
  (setq auto-save-no-message t)

  ;; Do not auto-disable auto-save after deleting large chunks of text.
  (setq auto-save-include-big-deletions t)
  (setq kill-buffer-delete-auto-save-files t)

  ;;; Completions
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq-default case-fold-search t)   ; For general regexp
  (setq read-file-name-completion-ignore-case t)

  ;;; Fontification
  ;; Disable fontification during user input to reduce lag in large buffers.
  ;; Also helps marginally with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

  ;;; Scrolling
  ;; Enables faster scrolling. This may result in brief periods of inaccurate
  ;; syntax highlighting, which should quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Move point to top/bottom of buffer before signaling a scrolling error.
  (setq scroll-error-top-bottom t)

  ;; Keep screen position if scroll command moved it vertically out of the window.
  (setq scroll-preserve-screen-position t)

  ;; If `scroll-conservatively' is set above 100, the window is never
  ;; automatically recentered, which decreases the time spend recentering.
  (setq scroll-conservatively 101)

  ;;; Cursor
  ;; Reduce rendering/line scan work by not rendering cursors or regions in
  ;; non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq x-stretch-cursor nil)

  ;; Ask the user whether to terminate asynchronous compilations on exit.
  ;; This prevents native compilation from leaving temporary files in /tmp.
  (setq native-comp-async-query-on-exit t)


  ;; Eliminate delay before highlighting search matches
  (setq lazy-highlight-initial-delay 0)

  ;;; Comments
  (setq comment-empty-lines t)
  (setq comment-multi-line t)
  (setq comment-style 'multi-line)
  (setq-default comment-column 0)

  ;; Load custom file
  (load custom-file 'noerror)

  ;; Do not notify the user each time Python tries to guess the indentation offset
  (setq python-indent-guess-indent-offset-verbose nil)

  ;; Enhance `apropos' and related functions to perform more extensive searches
  (setq apropos-do-all t)

  ;; Fixes #11: Prevents help command completion from triggering autoload.
  ;; Loading additional files for completion can slow down help commands and may
  ;; unintentionally execute initialization code from some libraries.
  (setq help-enable-completion-autoload nil)
  (setq help-enable-autoload nil)
  (setq help-enable-symbol-autoload nil)
  (setq help-window-select t)  ;; Focus new help windows when opened

  :bind (:map global-map
              ("C-x C-r" . recentf-open)
              ("C-x k" . kill-current-buffer)
              ("C-x C-d" . nil) ; I never use it
              ("C-z" . nil) ; I never use it
              ("C-x C-c" . nil) ; don't need it
              ("C-x C-z" . nil) ; don't need it
              ("M-`" . nil); don't need it
              ("C-h h" . nil) ; don't need keybindings for the hello file

              ("M-F" . forward-to-word)
              ("M-B" . backward-to-word)
              ("M-i" . back-to-indentation)
              ("C-c C-\\" . pop-to-mark-command)
              ("C-x C-b" . ibuffer)
              ("M-o" . other-window)
              ("C-z" . zap-up-to-char)
              ("<f5>" . scratch-buffer)
              ("<f7>" . display-line-numbers-mode)
              )
  )

;; (add-to-list 'load-path (concat user-emacs-directory "lisp"))
(let ((custom-dir (expand-file-name "lisp/" user-emacs-directory)))
  (when (file-directory-p custom-dir)
    (add-to-list 'load-path custom-dir)))
(require 'custom-functions)

(defvar dj-laptop-p (null (directory-empty-p "/sys/class/power_supply"))
  "When non-nil, we assume to be working on a laptop.")

  #+end_src

* Use Package

#+begin_src elisp :tangle init.el
(setq use-package-always-defer t)
(setq use-package-always-ensure t)
(setq use-package-compute-statistics t)
(setq use-package-vc-prefer-newest t)
;; Setting use-package-expand-minimally to (t) results in a more compact output
;; that emphasizes performance over clarity.
(setq use-package-expand-minimally (not dj-emacs-debug))
(setq use-package-enable-imenu-support t)
(setq debug-on-error dj-emacs-debug)
(setq enable-local-variables t)


(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

;; Highest number gets priority (what is not mentioned has priority 0)
(setq package-archive-priorities
      '(("melpa" . 10)
        ("gnu-elpa" . 5)
        ("nongnu" . 1)))

(package-initialize)
;; (package-refresh-contents)

#+end_src

* Builtin Packages
** Imenu

#+begin_src elisp :tangle init.el
(use-package imenu
  :ensure nil
  :commands (imenu)
  :config
  (setq imenu-auto-rescan t)
  (setq imenu-flatten t)
  (setq imenu-max-item-length 160))
#+end_src

** Flymake

#+begin_src elisp
(use-package flymake
  :ensure nil
  :config
  ;; Disable wrapping around when navigating Flymake errors.
  (setq flymake-wrap-around nil))
#+end_src

** Line Numbers

#+begin_src elisp :tangle init.el
(use-package display-line-numbers
  :ensure nil
  :config
  (setq display-line-numbers-type 'visual))

;; Line numbers for these prog modes
(dolist (mode-hook '(python-ts-mode-hook
                     c-ts-mode-hook
                     emacs-lisp-mode-hook
                     c++-ts-mode-hook
                     rust-ts-mode-hook))
  (add-hook mode-hook #'display-line-numbers-mode))

#+end_src

** Savehist

#+begin_src elisp :tangle init.el
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq history-delete-duplicates t))
#+end_src

** Project

#+begin_src elisp
(use-package project
  :ensure nil
  :bind (:map global-map
              ("C-x p a" . project-remember-project)
              ("C-x p R" . my-project-remove-known-projects))
  :config
  (defun my-project-remove-known-projects ()
    "Remove list of projects from project.el together."
    (interactive)
    (let* ((known-roots (mapcar #'car project--list))  ;; extract strings
           (selected-projects (completing-read-multiple "Remove project(s): " known-roots nil t))
           (nprojects (length selected-projects)))
      (when (and selected-projects
                 (yes-or-no-p (format "Remove %d project(s)?\n\n%s"
                                      nprojects
                                      (string-join selected-projects "\n"))))
        (setq project--list
              (cl-remove-if (lambda (entry)
                              (member (car entry) selected-projects))
                            project--list))
        (message "Removed %d project(s)" nprojects)))))

#+end_src

** Minibuffer

#+begin_src elisp :tangle init.el
(use-package minibuffer
  :ensure nil
  :demand t
  :hook (minibuffer-setup . cursor-intangible-mode)
  :config

  ;; Do not allow the cursor to move inside the minibuffer prompt.  I
  ;; got this from the documentation of Daniel Mendler's Vertico
  ;; package: <https://github.com/minad/vertico>.
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (setq completion-auto-deselect nil))
#+end_src

** MB Depth

"Recursive minibuffers" are of those advanced features that you don’t need frequently, but when you do, it is an excellent addition to your workflow. The concept describes the use of a minibuffer while another minibuffer is already open.

The read-minibuffer-restore-windows restores the window layout that was in place when the minibuffer recursion started. I personally do not want that: just leave me where I am.

The minibuffer-depth-indicate-mode shows a number next to the minibuffer prompt, indicating the level of depth in the recursion, starting with 2.

#+begin_src elisp :tangle init.el
(use-package mb-depth
  :ensure nil
  :hook (after-init . minibuffer-depth-indicate-mode)
  :config
  (setq read-minibuffer-restore-windows nil) ; Emacs 28
  (setq enable-recursive-minibuffers t))
#+end_src

** Battery

#+begin_src elisp :tangle init.el
;; (use-package battery
;;   :ensure nil
;;   :if dj-laptop-p
;;   :hook (after-init . display-battery-mode))
#+end_src
** Auto revert

#+begin_src elisp :tangle init.el
;;;; Auto revert mode
(use-package autorevert
  :ensure nil
  :hook (after-init . global-auto-revert-mode)
  :config
  (setq auto-revert-verbose t)
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-stop-on-user-input nil))
#+end_src

** Repeat

#+begin_src elisp :tangle init.el
(use-package repeat
  :ensure nil
  :defer 2
  :hook (after-init . repeat-mode)
  :config
  (setq repeat-exit-timeout 5)
  (setq repeat-exit-key "<escape>")
  )
#+end_src

** Recentf

#+begin_src elisp :tangle init.el
(use-package recentf
  :ensure nil
  :hook (after-init . recentf-mode)
  :config
  (setq recentf-max-saved-items 100)
  (setq recentf-max-menu-items 25) ; I don't use the `menu-bar-mode', but this is good to know
  (setq recentf-save-file-modes nil)
  (setq recentf-initialize-file-name-history nil)
  (setq recentf-auto-cleanup nil)
  (setq recentf-suppress-open-file-help t)
  ;; (setq recentf-filename-handlers nil)
  (setq recentf-show-file-shortcuts-flag nil))
#+end_src

** Isearch

#+begin_src elisp :tangle init.el
(use-package isearch
  :ensure nil
  :config
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil))

#+end_src
** Ibuffer

#+begin_src elisp :tangle init.el
(use-package ibuffer
  :ensure nil
  :commands (ibuffer)
  :config
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("Dired"    (mode . dired-mode))
           ("Magit"    (name . "\*magit"))
           ("Help"     (or (mode . help-mode)
                           (mode . Info-mode)))
           ("Emacs"    (or
                        (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$"))))))

 ;; Don't show empty filter groups
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Sort by major mode
  (setq ibuffer-default-sorting-mode 'major-mode)

  (define-ibuffer-column human-readable-size-column
    (:name "Size" :inline t)
    (with-current-buffer buffer
      (file-size-human-readable (buffer-size buffer))))

  ;; Show filename and path in buffer list
  (setq ibuffer-formats
        '((mark modified read-only locked
                " " (name 18 18 :left)
                " " (human-readable-size-column 9 -1 :right)
                " " (mode 16 16 :right :elide) " " filename-and-process)))

  ;; auto refresh ibuffer
  (add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)


  ;; Use the default group on startup
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default"))))
#+end_src
** Dired

#+begin_src elisp :tangle init.el
(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (setq dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso")
  (setq dired-dwim-target t)
  (setq dired-deletion-confirmer 'y-or-n-p)
  (setq dired-recursive-copies 'always)
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-create-destination-dirs 'ask)
  (setq dired-free-space nil)
  (setq dired-auto-revert-buffer 'dired-buffer-stale-p)
  (setq dired-vc-rename-file t)
  ;; Disable the prompt about killing the Dired buffer for a deleted directory.
  (setq dired-clean-confirm-killing-deleted-buffers nil)
  (setq dired-mouse-drag-files t)
  (setq dired-recursive-deletes 'top)
  (setq ls-lisp-dired-first t)

  (setq dired-omit-verbose nil)
  (setq dired-omit-files (concat "\\`[.]\\'"))

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'hl-line-mode)
  :bind (:map dired-mode-map
              ("C-c C-k" . dired-kill-subdir)))
#+end_src

** Eldoc

#+begin_src elisp :tangle init.el
(use-package eldoc
  :ensure nil)
#+end_src

** Uniquify

#+begin_src elisp :tangle init.el
(use-package uniquify
  :ensure nil
  :init (setq uniquify-buffer-name-style 'forward))
#+end_src

** Windmove

#+begin_src elisp :tangle init.el
;;; Directional window motions (windmove)
(use-package windmove
  :ensure nil
  :bind
  ;; Those override some commands that are already available with
  ;; C-M-u, C-M-f, C-M-b.
  (("C-M-<up>" . windmove-up)
   ("C-M-<right>" . windmove-right)
   ("C-M-<down>" . windmove-down)
   ("C-M-<left>" . windmove-left)
   ("C-M-S-<up>" . windmove-swap-states-up)
   ("C-M-S-<right>" . windmove-swap-states-right) ; conflicts with `org-increase-number-at-point'
   ("C-M-S-<down>" . windmove-swap-states-down)
   ("C-M-S-<left>" . windmove-swap-states-left))
  :config
  (setq windmove-create-window nil))
#+end_src

** Compile

#+begin_src elisp :tangle init.el
(use-package compile
  :ensure nil
  :hook (compilation-filter . ansi-color-compilation-filter)
  :config
  (setq compilation-always-kill t)
  (setq compilation-ask-about-save nil)
  (setq compilation-scroll-output 'first-error))

#+end_src

** Eglot

#+begin_src elisp :tangle init.el
(use-package eglot
  :ensure nil
  :commands eglot
  :config

  (add-to-list 'eglot-server-programs '((c++-ts-mode c-ts-mode) "clangd"))
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++--ts-mode-hook 'eglot-ensure)

  ;; Eglot optimization
  (if dj-emacs-debug
      (setq eglot-events-buffer-config '(:size 2000000 :format full))
    ;; This reduces log clutter to improves performance.
    (setq jsonrpc-event-hook nil)
    ;; Reduce memory usage and avoid cluttering *EGLOT events* buffer
    (setq eglot-events-buffer-config '(:size 0 :format short)))

  (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)

  ;; A setting of nil or 0 means Eglot will not block the UI at all, allowing
  ;; Emacs to remain fully responsive, although LSP features will only become
  ;; available once the connection is established in the background.
  (setq eglot-sync-connect 0)

  (setq eglot-autoshutdown t)  ; Shut down server after killing last managed buffer


  (setq eglot-report-progress nil)

  ;; Activate Eglot in cross-referenced non-project files
  (setq eglot-extend-to-xref t))
#+end_src

** Subword

#+begin_src elisp :tangle init.el
(use-package subword
  :init
  (global-subword-mode))
#+end_src

** Treesitter

#+begin_src elisp :tangle init.el
(use-package treesit
  :ensure nil
  :demand
  :config
  (setq treesit-font-lock-level 4))
#+end_src

* Packages
** Avy

#+begin_src elisp :tangle init.el
(use-package avy
  :bind (:map global-map
              ("M-g f" . avy-goto-line)
              ("C-:" . avy-goto-char)
              ("C-;" . avy-goto-char-in-line)))
#+end_src

** Ob Async

#+begin_src elisp
(use-package ob-async)
#+end_src

** Minions

#+begin_src elisp :tangle init.el
(use-package minions
  :demand t
  :config
  (setq minions-mode-line-lighter " *")
  :init
  (minions-mode))
#+end_src

** Clang Format

#+begin_src elisp :tangle init.el
(use-package clang-format
  :hook ((c-ts-mode . clang-format-on-save-mode)
         (c++-ts-mode . clang-format-on-save-mode)))
#+end_src

** Dump Jump

#+begin_src elisp :tangle init.el
(use-package dumb-jump
  :init
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :config

  ;; Enable completion in the minibuffer instead of the definitions buffer
  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  xref-show-xrefs-function 'xref-show-definitions-completing-read)
#+end_src

** Evil

#+begin_src elisp :tangle init.el
;; (use-package evil
;;   :demand ; No lazy loading
;;   :config
;;   (evil-set-initial-state 'eshell-mode 'emacs)
;;   (evil-set-initial-state 'vterm-mode 'emacs)
;;   (evil-set-initial-state 'dired-mode 'emacs)
;;   (setq evil-default-cursor (quote (t))
;;         evil-visual-state-cursor '(box)
;;         evil-normal-state-cursor '(box)
;;         evil-insert-state-cursor '(box))
;;   :init
;;   (setq evil-respect-visual-line-mode t)
;;   (setq evil-want-keybinding nil)
;;   (evil-mode 1))

#+end_src

** Evil Collection

#+begin_src elisp :tangle init.el
;; (use-package evil-collection
;;   :after evil
;;   :demand
;;   :config
;;   :init
;;   (evil-collection-init))
#+end_src

** Org Export Github Markdown

#+begin_src elisp
(use-package ox-gfm
  :after org)
#+end_src

** Evil Surround

#+begin_src elisp :tangle init.el
;; (use-package evil-surround
;;   :after evil
;;   :init
;;   (global-evil-surround-mode 1))
#+end_src

** Embark

#+begin_src elisp :tangle init.el
(use-package embark)
#+end_src

** cpp-func-impl

#+begin_src elisp :tangle init.el
(use-package cpp-func-impl
  ;; :vc (cpp-func-impl :url "https://github.com/dheerajshenoy/cpp-func-impl")
  :load-path "~/Gits/cpp-func-impl.el"
  :commands (cpp-func-impl-implement cpp-func-impl-implement-all cpp-func-impl-concrete-class)
  :custom
  (cpp-func-impl-comment-string "// TODO: `%m` `%d` `%t` `%c`"))
#+end_src

** Orderless

#+begin_src elisp :tangle init.el
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico

#+begin_src elisp :tangle init.el
(use-package vertico
  :init
  (vertico-mode))
#+end_src

** Projectile

#+begin_src elisp :tangle init.el
;; (use-package projectile
;;   :init
;;   (projectile-mode)
;;   :custom
;;   (projectile-command-map "C-x p")
;;   :bind (:map global-map
;;               ("C-x p a" . projectile-add-known-project))
;;   :config
;;   (defun my-projectile-remove-known-projects ()
;;     "Remove list of projects from projectile together."
;;     (interactive)
;;     (let* ((projects (projectile-known-projects))
;;            (selected-projects (completing-read-multiple "Remove project(s): " projects nil t)))
;;       (when (and selected-projects
;;                  (yes-or-no-p (format "Remove %d project(s)?\n\n %s"
;;                                       (length selected-projects)
;;                                       (string-join selected-projects "\n"))))
;;         (dolist (project selected-projects)
;;           (projectile-remove-known-project project)
;;           (message "Removed: %s" project))))))

#+end_src

** Marginalia

#+begin_src elisp :tangle init.el
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src

** Magit

#+begin_src elisp :tangle init.el
(use-package magit
  :commands (magit-status)
  :bind (:map global-map
              ("C-x g" . magit-status)))
#+end_src

** Multiple Cursors

#+begin_src elisp :tangle init.el
(use-package multiple-cursors
  :bind (:map global-map
              ("C-S-c C-S-c" . mc/edit-lines)
              ("C->" . mc/mark-next-like-this)
              ("C-<" . mc/mark-previous-like-this)
              ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** Pyvenv

#+begin_src elisp :tangle init.el
(use-package pyvenv)
#+end_src

** Ripgrep

#+begin_src elisp :tangle init.el
(use-package ripgrep
  :bind (:map global-map
              ("M-s r" . ripgrep-regexp)))
#+end_src

** Rainbow Mode

#+begin_src elisp :tangle init.el
(use-package rainbow-mode
  :config
  (rainbow-mode)
  (setq rainbow-ansi-colors nil)
  (setq rainbow-x-colors nil))
#+end_src

** Which Key

#+begin_src elisp :tangle init.el
(use-package which-key
  :demand
  :init
  (setq which-key-idle-delay 0.5) ; Open after .5s instead of 1s
  :config
  (which-key-mode))
#+end_src

** Vterm

#+begin_src elisp :tangle init.el
(use-package vterm)
#+end_src

** Spacious Padding

#+begin_src elisp :tangle init.el
;; (use-package spacious-padding
;;   :if (display-graphic-p)
;;   :hook (after-init . spacious-padding-mode))
#+end_src

** Vterm Toggle

#+begin_src elisp :tangle init.el
(use-package vterm-toggle
  :after vterm)
#+end_src

** Corfu

#+begin_src elisp :tangle init.el
(use-package corfu
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  (corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-min-width 20)
  (corfu-popupinfo-delay '(1.25 . 0.5))
  :init
  (corfu-history-mode)
  (corfu-popupinfo-mode)
  (global-corfu-mode))
#+end_src

** Cape

Cape, or Completion At Point Extensions, extends the capabilities of
in-buffer completion. It integrates with Corfu or the default completion UI,
by providing additional backends through completion-at-point-functions.

#+begin_src elisp :tangle init.el
(use-package cape
  :bind ("C-c p" . cape-prefix-map))
  #+end_src

** Treesit Auto

#+begin_src elisp :tangle init.el
(use-package treesit-auto
  :demand
  :custom
  (treesit-auto-install t)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

** Markdown Mode

#+begin_src elisp :tangle init.el

(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode)
  :config
  (setq markdown-fontify-code-blocks-natively t))
  #+end_src

** General

#+begin_src elisp :tangle init.el

;; (use-package general
;;   :demand
;;   :config
;;   (general-evil-setup)
;;
;;   (general-create-definer my-leader-key
;;     :states '(normal insert visual emacs)
;;     :keymaps 'override
;;     :prefix "SPC"
;;     :global-prefix "C-SPC")
;;
;;   (my-leader-key
;;     "SPC" '(execute-extended-command :which-key "execute command")
;;
;;     ;; Buffer
;;     "b" '(:ignore t :wk "buffer")
;;     "b k"  '(kill-current-buffer :wk "Kill buffer")
;;     "b p" '(previos-buffer :wk "Previous buffer")
;;     "b n" '(next-buffer :wk "Next buffer")
;;     "b i" '(ibuffer :wk "Ibuffer")
;;
;;     ;; LSP
;;
;;     "l" '(:ignore t :wk "LSP")
;;     "l r" '(eglot-rename :wk "Rename object")
;;     "l f" '(eglot-format :wk "Format")
;;     "l c" '(eglot-code-actions :wk "Code actions")
;;
;;     ;; Files
;;
;;     "f" '(:ignore t :wk "Files")
;;     "f c" '(my-open-config-file :wk "Config file")
;;     "f r" '(recentf-open :wk "Recent files")
;;     "f i" '(imenu :wk "Imenu")
;;     "f p" '(ff-find-other-file :wk "Find other file")
;;
;;
;;     ;;; Package
;;
;;     "P" '(:ignore t :wk "Package")
;;     "P i" '(package-install :wk "Package Install")
;;     "P d" '(package-delete :wk "Package Delete")
;;     "P a" '(package-autoremove :wk "Package Autoremove")
;;     "P r" '(package-refresh-contents :wk "Package refresh contents")
;;     "P l" '(list-packages :wk "List packages")
;;
;;     ;; Search
;;     "s" '(:ignore t :wk "Search")
;;     "s s" '(isearch-forward :wk "ISearch")
;;
;;     ;; Toggle
;;     "t" '(:ignore t :wk "Toggle")
;;     "t t" '(vterm-toggle :wk "Vterm")
;;     "t v" '(visual-line-mode :wk "Visual Line Mode")
;;
;;     ))

#+end_src

** Org Bullets


#+begin_src elisp :tangle init.el
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

** Yasnippet

#+begin_src elisp :tangle init.el
(use-package yasnippet
  :hook ((prog-mode . yas-minor-mode)
         (text-mode . yas-minor-mode)))
#+end_src

* Language Specific
** C++

#+begin_src elisp :tangle init.el
(defun my-c++-settings ()
  "Settings for my C++ setup"
  (setq-default c-ts-mode-indent-offset 4))

(use-package c++-ts-mode
  :ensure nil
  :bind (:map c++-ts-mode-map
              ("C-c o" . ff-find-other-file)))

(add-hook 'c++-ts-mode #'my-c++-settings)
#+end_src

** Org

#+begin_src elisp :tangle init.el
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :init
  (require 'org-tempo)
  :config
  (setq org-structure-template-alist '(("a" . "export ascii")
                                       ("c" . "center")
                                       ("C" . "comment")
                                       ("e" . "example")
                                       ("E" . "export")
                                       ("h" . "export html")
                                       ("l" . "export latex")
                                       ("q" . "quote")
                                       ("s" . "src")
                                       ("v" . "verse")
                                       ("el" . "src elisp")
                                       ("py" . "src python")
                                       ))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     ))

  (defun my-reload-org-inline-images ()
    "Reloads the inline images displayed in org-mode src blocks."
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook #'org-redisplay-inline-images)


  (setq org-return-follows-link t)
  (setq org-ellipsis " ")
  (setq org-src-window-setup 'current-window)
  (setq org-src-preserve-indentation t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-display-inline-images t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-with-inline-images t)
  (setq org-edit-src-content-indentation 0))

#+end_src

** Shell

#+begin_src elisp :tangle init.el
(add-hook 'sh-mode-hook
          (lambda ()
            (setq sh-basic-offset 4
                  sh-indentation 4)))
#+end_src

* Custom Functions
** Pulse on Yank

#+begin_src elisp :tangle lisp/custom-functions.el

;;-*- lexical-binding: t; -*-

;; (defun pulse-momentary-highlight-region (start end &optional face)
;;   "Highlight between START and END, unhighlighting before next command.
;; Optional argument FACE specifies the face to do the highlighting."
;;   (let ((o (make-overlay start end)))
;;     ;; Mark it for deletion
;;     (overlay-put o 'pulse-delete t)
;;     (pulse-momentary-highlight-overlay o face)))

(defun my-yank-pulse-advice (orig-fn beg end &rest args)
  (pulse-momentary-highlight-region beg end)
  (apply orig-fn beg end args))

;; (advice-add 'evil-yank :around #'my-yank-pulse-advice)

#+end_src

** Get Fonts

#+begin_src elisp :tangle lisp/custom-functions.el
(defun my-get-fonts (&optional arg)
  "Prompt to select a font file from /usr/share/fonts/TTF.
If called with C-u prefix, it sets the selected font for the frame."
  (interactive "P")
  (let* ((font (completing-read "Choose font: " (font-family-list))))
    (if arg (set-face-attribute 'default nil
                                :font font
                                :height 160)
      (kill-new font))
    (message "You chose: %s" font)))
#+end_src

** Open Config File

#+begin_src elisp :tangle lisp/custom-functions.el
(defun my-open-config-file ()
  "Open the config.org file in the `user-emacs-directory`."
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
#+end_src

** Preview theme

#+begin_src elisp :tangle lisp/custom-functions.el
(defun my-preview-theme ()
  "Preview themes by scrolling."
  (interactive)
  (let* ((themes (custom-available-themes))
         (buffer-name "*Theme Preview*"))
    (with-current-buffer (get-buffer-create buffer-name)
      (let ((inhibit-read-only t))
        (erase-buffer)
        (dolist (theme themes)
          (insert (format "%s\n" theme)))
        (goto-char (point-min))
        (theme-preview-mode)))
    (pop-to-buffer buffer-name)))

(define-derived-mode theme-preview-mode special-mode "Theme-Preview"
  "Major mode for previewing and applying themes."
  (setq buffer-read-only t)
  (use-local-map (let ((map (make-sparse-keymap)))
                   (keymap-set map "n" (lambda ()
                                         (interactive)
                                         (next-line)
                                         (my-theme-preview-apply)))
                   (keymap-set map "p" (lambda ()
                                         (interactive)
                                         (previous-line)
                                         (my-theme-preview-apply)))
                   (keymap-set map "q" #'quit-window)
                   map)))

(defun my-theme-preview-apply ()
  "Apply theme at point."
  (interactive)
  (let* ((theme-name (thing-at-point 'symbol t))
         (theme-sym (and theme-name (intern theme-name))))
    (when (and theme-sym (member theme-sym (custom-available-themes)))
      ;; Disable all enabled themes first
      (mapc #'disable-theme custom-enabled-themes)
      ;; Load the new theme
      (load-theme theme-sym t)
      (message "Applied Theme: %s" theme-sym))))

#+end_src

** Swap Lines

#+begin_src elisp :tangle lisp/custom-functions.el
;; TODO

#+end_src

** Ctrl + Backspace

#+begin_src elisp :tangle lisp/custom-functions.el
(defun my-backward-kill-word ()
  "Remove all whitespace if the character behind the cursor is whitespace, otherwise remove a word."
  (interactive)
  (if (looking-back "[ \n]")
      ;; delete horizontal space before us and then check to see if we
      ;; are looking at a newline
      (progn (delete-horizontal-space 't)
             (while (looking-back "[ \n]")
               (backward-delete-char 1)))
    ;; otherwise, just do the normal kill word.
    (backward-kill-word 1)))
#+end_src

** Open in external filemanager

#+begin_src elisp
(defun my--open-path-in-external-file-manager (&optional path)
  "Open the path specified by PATH in external file manager using xdg-open."
  (make-process
   :name "file-manager"
   :buffer nil
   :command `("pcmanfm")))


(my--open-path-in-external-file-manager)
#+end_src

** Provide

#+begin_src elisp :tangle lisp/custom-functions.el
(provide 'custom-functions)
#+end_src

* Keybindings

#+begin_src elisp :tangle init.el
(use-package emacs
  :ensure nil
  :bind (:map global-map
              ("C-<backspace>" . my-backward-kill-word)))
;; https://karthinks.com/software/an-elisp-editing-tip/
;; (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
#+end_src

* Theme

#+begin_src elisp :tangle init.el
(load-theme 'ef-owl t)
#+end_src

* Modeline

#+begin_src elisp :tangle init.el
(setq mode-line-compact t)

(defgroup my-modeline nil
  "Custom modeline."
  :group 'mode-line)

(defgroup my-modeline-faces nil
  "Faces for my custom modeline."
  :group 'my-modeline)

;;;; Faces

(defface my-modeline-kbd-macro-module-face
  '((default :inherit bold)
    (t :background "red"))
  "Face for kbd macro module."
  :group 'my-modeline-faces)

(defface my-modeline-narrow-module-face
  '((default :inherit bold)
    (t :background "green"))
  "Face for narrow module."
  :group 'my-modeline-faces)

(defface my-modeline-input-method-module-face
  '((default :inherit bold))
  "Face for input method module."
  :group 'my-modeline-faces)

;;;; Helper functions

(defun my-modeline-buffer-name ()
  "Return buffer name, with read-only indicator if relevant."
  (let ((name (buffer-name)))
    (if buffer-read-only
        (format "%s %s" (char-to-string #xE0A2) name)
      (format " %s " name))))

(defun my-modeline-position ()
  "Return the position string."
  "(%l, %c)")

(defun my-modeline-buffer-identification-face ()
  "Return appropriate face or face list for `my-modeline-buffer-identification'."
  (let ((file (buffer-file-name)))
    (cond
     ((and (mode-line-window-selected-p)
           file
           (buffer-modified-p))
      '(italic mode-line-buffer-id))
     ((and file (buffer-modified-p))
      'italic)
     ((mode-line-window-selected-p)
      'mode-line-buffer-id))))

(defun my-modeline-buffer-name-help-echo ()
  "Return `help-echo' value for `my-modeline-buffer-identification'."
  (concat
   (propertize (buffer-name) 'face 'mode-line-buffer-id)
   "\n"
   (propertize
    (or (buffer-file-name)
        (format "No underlying file.\nDirectory is: %s" default-directory))
    'face 'font-lock-doc-face)))

;;;; Buffer Status Module

(defvar-local my-modeline-buffer-status-module
  '(:eval
    (propertize (my-modeline-buffer-name)
                'face (my-modeline-buffer-identification-face)
                'mouse-face 'mode-line-highlight
                'help-echo (my-modeline-buffer-name-help-echo)))
  "Mode line construct displaying buffer modified status information.")

;;;; Buffer position Module

(defvar-local my-modeline-position-module
  '(:eval
    (propertize my-modeline-position))
  "Mode line construct displaying buffer position information.")

;;;; Keyboard Macro Module

(defvar-local my-modeline-kbd-macro-module
  '(:eval
    (when (and (mode-line-window-selected-p) defining-kbd-macro)
      (propertize " KMacro " 'face 'my-modeline-kbd-macro-module-face)))
  "Mode line construct displaying `mode-line-defining-kbd-macro'.
Specific to the current window's mode line.")

;;;; Narrow Module

(defvar-local my-modeline-narrow-module
    '(:eval
      (when (and (mode-line-window-selected-p)
                 (buffer-narrowed-p)
                 (not (derived-mode-p 'Info-mode 'help-mode 'special-mode 'message-mode)))
        (propertize "  Narrow " 'face 'my-modeline-narrow-module-face)))
    "Mode line construct to report the narrowed state of the current buffer.")

;;;; Input Method Module

(defvar-local my-modeline-input-method-module
  '(:eval
    (when current-input-method-title
      (propertize (format " %s " current-input-method-title)
                  'face 'my-modeline-input-method-module-face
                  'mouse-face 'mode-line-highlight)))
  "Mode line construct to report the multilingual environment.")

;;;; Misc Module

(defvar-local my-modeline-misc-info-module
  '(:eval
    (when (mode-line-window-selected-p)
      mode-line-misc-info))
  "Mode line construct displaying `mode-line-misc-info'.
Specific to the current window's mode line.")

(dolist (construct '(my-modeline-buffer-status-module
                     my-modeline-position-module
                     my-modeline-narrow-module
                     my-modeline-input-method-module
                     my-modeline-kbd-macro-module
                     my-modeline-misc-info-module))
  (put construct 'risky-local-variable t))

(setq-default mode-line-format
              '("%e"
                my-modeline-kbd-macro-module
                my-modeline-narrow-module
                my-modeline-input-method-module
                my-modeline-buffer-status-module
                mode-line-frame-identification
                my-modeline-position-module
                mode-line-format-right-align
                (project-mode-line project-mode-line-format)
                (vc-mode vc-mode)
                my-modeline-misc-info-module
                mode-line-modes))
#+end_src
